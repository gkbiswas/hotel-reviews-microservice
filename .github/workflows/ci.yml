name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

env:
  GO_VERSION: '1.23'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: gkbiswas/hotel-reviews
  COVERAGE_THRESHOLD: 42  # Current baseline - will increase incrementally
  COVERAGE_TARGET: 80     # Long-term target
  MIN_COVERAGE_INCREASE: 1 # Minimum increase required for coverage improvement
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7-alpine'
  LOCALSTACK_VERSION: '3.0'

jobs:
  # Job for detecting changes and setting up matrix
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go-files-changed: ${{ steps.changes.outputs.go-files }}
      docker-files-changed: ${{ steps.changes.outputs.docker-files }}
      workflow-files-changed: ${{ steps.changes.outputs.workflow-files }}
      deployment-files-changed: ${{ steps.changes.outputs.deployment-files }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go-files:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            docker-files:
              - 'docker/**'
              - 'Dockerfile'
              - 'docker-compose.yml'
            workflow-files:
              - '.github/workflows/**'
            deployment-files:
              - 'deploy/**'
              - 'k8s/**'
              - 'helm/**'

  # Code Quality and Security Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.go-files-changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Verify Go modules
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m --config=.golangci.yml --out-format=colored-line-number
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false
          
      - name: Quality Gate - Linting
        run: |
          echo "✅ All linting checks passed!"
          echo "Code quality standards are being maintained."

      - name: Run gosec security scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./... || true
          
      - name: Upload gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy for dependency vulnerabilities
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  # Unit Tests with Coverage
  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.go-files-changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... -short
          go tool cover -html=coverage.out -o coverage.html

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current Coverage: $COVERAGE%"
          echo "Minimum Required: $COVERAGE_THRESHOLD%"
          echo "Long-term Target: $COVERAGE_TARGET%"
          
          # Check if coverage meets minimum threshold
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below minimum threshold $COVERAGE_THRESHOLD%"
            echo "Please add tests to increase coverage."
            exit 1
          fi
          
          # Provide encouragement and guidance for coverage improvement
          if (( $(echo "$COVERAGE < $COVERAGE_TARGET" | bc -l) )); then
            REMAINING=$(echo "$COVERAGE_TARGET - $COVERAGE" | bc -l)
            echo "✅ Coverage meets minimum threshold"
            echo "💡 $REMAINING% more coverage needed to reach target of $COVERAGE_TARGET%"
            echo "Consider adding tests for:"
            echo "  - Error handling paths"
            echo "  - Edge cases in business logic"
            echo "  - Integration scenarios"
          else
            echo "🎉 Excellent! Coverage exceeds target of $COVERAGE_TARGET%"
          fi
          
          # Save coverage for comparison in future runs
          echo "$COVERAGE" > current_coverage.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html
            current_coverage.txt
          retention-days: 5

      - name: Quality Gate Summary
        run: |
          echo "🎯 Quality Gate Summary for Go ${{ matrix.go-version }}"
          echo "=================================="
          if [ -f current_coverage.txt ]; then
            COVERAGE=$(cat current_coverage.txt)
            echo "📊 Test Coverage: $COVERAGE%"
          fi
          echo "✅ Unit Tests: Passed"
          echo "✅ Race Conditions: None detected"
          echo "✅ Quality Standards: Maintained"
          echo ""
          echo "🚀 Ready for integration testing!"

  # Integration Tests with TestContainers
  integration-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.go-files-changed == 'true' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hotel_reviews_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/5432; do sleep 1; done'
          timeout 60 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/6379; do sleep 1; done'

      - name: Run database migrations
        run: |
          go run ./cmd/migrate up
        env:
          HOTEL_REVIEWS_DATABASE_HOST: localhost
          HOTEL_REVIEWS_DATABASE_PORT: 5432
          HOTEL_REVIEWS_DATABASE_USER: postgres
          HOTEL_REVIEWS_DATABASE_PASSWORD: postgres
          HOTEL_REVIEWS_DATABASE_NAME: hotel_reviews_test

      - name: Run integration tests
        run: |
          go test -v -tags=integration ./... -coverprofile=integration_coverage.out
        env:
          HOTEL_REVIEWS_DATABASE_HOST: localhost
          HOTEL_REVIEWS_DATABASE_PORT: 5432
          HOTEL_REVIEWS_DATABASE_USER: postgres
          HOTEL_REVIEWS_DATABASE_PASSWORD: postgres
          HOTEL_REVIEWS_DATABASE_NAME: hotel_reviews_test
          HOTEL_REVIEWS_REDIS_HOST: localhost
          HOTEL_REVIEWS_REDIS_PORT: 6379
          TESTCONTAINERS_RYUK_DISABLED: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            integration_coverage.out
          retention-days: 5

  # Performance Benchmarks
  benchmarks:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.go-files-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -count=3 -timeout=30m ./... > benchmark_results.txt
          cat benchmark_results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt
          retention-days: 30

      - name: Performance regression check
        run: |
          # Install benchstat for performance comparison
          go install golang.org/x/perf/cmd/benchstat@latest
          # Compare with previous benchmarks if available
          if [ -f "previous_benchmark.txt" ]; then
            benchstat previous_benchmark.txt benchmark_results.txt
          fi

  # Docker Build and Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped') && (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'skipped')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Amazon ECR
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Load Testing
  load-testing:
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: always() && needs.integration-tests.result == 'success' && needs.docker-build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          curl -O -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz
          tar -xzf k6-v0.47.0-linux-amd64.tar.gz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/

      - name: Start application for load testing
        run: |
          docker run -d --name test-app -p 8080:8080 \
            -e HOTEL_REVIEWS_DATABASE_HOST=localhost \
            -e HOTEL_REVIEWS_LOG_LEVEL=error \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10

      - name: Run load tests
        run: |
          k6 run --out json=load_test_results.json ./tests/load/basic_load_test.js
        continue-on-error: true

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load_test_results.json
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.ref == 'refs/heads/develop' && needs.docker-build.result == 'success' && needs.integration-tests.result == 'success'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}

      - name: Health check
        run: |
          for i in {1..30}; do
            if curl -f ${{ secrets.STAGING_URL }}/api/v1/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Health check failed after 5 minutes"
          exit 1

      - name: Run smoke tests
        run: |
          # Run basic smoke tests against staging
          curl -f ${{ secrets.STAGING_URL }}/api/v1/health
          # Add more smoke tests as needed

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests, load-testing]
    if: github.ref == 'refs/heads/main' && needs.docker-build.result == 'success' && needs.integration-tests.result == 'success'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Blue-Green deployment
        run: |
          # Implement blue-green deployment logic
          # This is a simplified example
          CURRENT_SERVICE=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query 'services[0].taskDefinition' --output text)
          
          # Create new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Update service with new task definition
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF

      - name: Wait for deployment and health check
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}
          
          # Health check
          for i in {1..10}; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health; then
              echo "Production health check passed"
              exit 0
            fi
            echo "Production health check failed, retrying..."
            sleep 30
          done
          echo "Production health check failed, initiating rollback"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          # Rollback to previous version
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $CURRENT_SERVICE

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on success
        if: ${{ success() }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          message: 'CI/CD pipeline completed successfully for ${{ github.repository }}@${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          message: 'CI/CD pipeline failed for ${{ github.repository }}@${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI/CD Pipeline Failed: ${{ github.repository }}'
          body: |
            The CI/CD pipeline for ${{ github.repository }} has failed.
            
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for more details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.EMAIL_USERNAME }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old Docker images
        if: github.event_name != 'pull_request'
        run: |
          # Clean up old images (keep last 10)
          docker images --filter "reference=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}" | tail -n +11 | awk '{print $3}' | xargs -r docker rmi

      - name: Cleanup old artifacts
        run: |
          # GitHub will automatically clean up artifacts based on retention policy
          echo "Artifacts will be cleaned up automatically based on retention policy"