name: Quality Gate

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  COVERAGE_THRESHOLD: 42
  COVERAGE_TARGET: 80

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: 🔍 Code Quality Analysis
        run: |
          echo "## 🔍 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Run gofmt check
        run: |
          echo "### 📝 Code Formatting" >> $GITHUB_STEP_SUMMARY
          if [ "$(gofmt -l . | wc -l)" -eq 0 ]; then
            echo "✅ All files are properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some files need formatting:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            gofmt -l . >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Run 'make fmt' to fix formatting issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run go vet
        run: |
          echo "### 🔧 Static Analysis (go vet)" >> $GITHUB_STEP_SUMMARY
          if go vet ./...; then
            echo "✅ No issues found by go vet" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Issues found by go vet - please fix them" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --config=.golangci.yml --out-format=github-actions
          
      - name: Lint Status
        run: |
          echo "### 🧹 Linting" >> $GITHUB_STEP_SUMMARY
          echo "✅ All linting checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Run tests with coverage
        run: |
          echo "### 🧪 Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... -short
          
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "**Current Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "**Minimum Required:** $COVERAGE_THRESHOLD%" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** $COVERAGE_TARGET%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ **Coverage Below Threshold!**" >> $GITHUB_STEP_SUMMARY
            echo "Coverage $COVERAGE% is below minimum threshold $COVERAGE_THRESHOLD%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Add more tests to increase coverage" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif (( $(echo "$COVERAGE < $COVERAGE_TARGET" | bc -l) )); then
            REMAINING=$(echo "$COVERAGE_TARGET - $COVERAGE" | bc -l)
            echo "✅ **Coverage Meets Minimum Threshold**" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Improvement Opportunity:** $REMAINING% more needed to reach target" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Consider adding tests for:**" >> $GITHUB_STEP_SUMMARY
            echo "- Error handling paths" >> $GITHUB_STEP_SUMMARY
            echo "- Edge cases in business logic" >> $GITHUB_STEP_SUMMARY
            echo "- Integration scenarios" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **Excellent! Coverage Exceeds Target**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Coverage by package
        run: |
          echo "### 📊 Coverage by Package" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
          retention-days: 30

      - name: Security scan
        run: |
          echo "### 🔒 Security Analysis" >> $GITHUB_STEP_SUMMARY
          if command -v gosec >/dev/null 2>&1; then
            if gosec -quiet ./...; then
              echo "✅ No security issues detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Security issues found - please review" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ Security scan skipped (gosec not installed)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Formatting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **All quality gates passed!** Ready for review and merge."

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read coverage data
            const coverage = fs.readFileSync('coverage.out', 'utf8');
            const coverageLines = coverage.split('\n').filter(line => line.includes('total:'));
            const totalCoverage = coverageLines.length > 0 ? 
              coverageLines[0].match(/\d+\.\d+/)?.[0] : 'Unknown';
            
            const comment = `## 🎯 Quality Gate Report
            
            ### 📊 Test Coverage
            - **Current:** ${totalCoverage}%
            - **Threshold:** ${{ env.COVERAGE_THRESHOLD }}%
            - **Target:** ${{ env.COVERAGE_TARGET }}%
            
            ### ✅ Quality Checks
            - ✅ Code formatting (gofmt)
            - ✅ Static analysis (go vet)
            - ✅ Linting (golangci-lint)
            - ✅ Test coverage meets threshold
            - ✅ Security scan
            
            **Status:** All quality gates passed! 🚀
            
            ---
            *This comment was automatically generated by the Quality Gate workflow*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Quality Gate Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }