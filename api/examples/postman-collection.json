{
  "info": {
    "name": "Hotel Reviews API",
    "description": "Comprehensive API collection for the Hotel Reviews microservice",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://api.hotelreviews.com/api/v1",
      "type": "string"
    },
    {
      "key": "stagingUrl",
      "value": "https://staging-api.hotelreviews.com/api/v1",
      "type": "string"
    },
    {
      "key": "localUrl",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "hotelId",
      "value": "123e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    },
    {
      "key": "reviewId",
      "value": "550e8400-e29b-41d4-a716-446655440000",
      "type": "string"
    },
    {
      "key": "providerId",
      "value": "987fcdeb-51a2-4567-8901-23456789abcd",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if it's expired",
          "const accessToken = pm.collectionVariables.get('accessToken');",
          "const refreshToken = pm.collectionVariables.get('refreshToken');",
          "",
          "if (refreshToken && !accessToken) {",
          "    console.log('No access token, attempting to refresh...');",
          "    // This would be implemented in individual requests that need auth",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct Content-Type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Check for rate limiting headers",
          "if (pm.response.headers.has('X-RateLimit-Limit')) {",
          "    pm.test('Rate limit headers present', function () {",
          "        pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.not.be.undefined;",
          "        pm.expect(pm.response.headers.get('X-RateLimit-Reset')).to.not.be.undefined;",
          "    });",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Health & Monitoring",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check the health status of the API and its dependencies"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health status is healthy', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test('Response contains version', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.version).to.not.be.undefined;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Circuit Breaker Health",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health/circuit-breakers",
              "host": ["{{baseUrl}}"],
              "path": ["health", "circuit-breakers"]
            },
            "description": "Check the status of circuit breakers"
          },
          "response": []
        },
        {
          "name": "Application Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Retrieve application performance metrics (requires authentication)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser_{{$timestamp}}\",\n  \"email\": \"testuser_{{$timestamp}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains user data and tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.user).to.not.be.undefined;",
                  "    pm.expect(response.data.access_token).to.not.be.undefined;",
                  "    pm.expect(response.data.refresh_token).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save tokens for later use",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.access_token);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refresh_token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate user and obtain access tokens"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.access_token).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save tokens",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.access_token);",
                  "    pm.collectionVariables.set('refreshToken', response.data.refresh_token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New token received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.access_token).to.not.be.undefined;",
                  "});",
                  "",
                  "// Update access token",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.access_token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and invalidate tokens"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear tokens on successful logout",
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Reviews",
      "item": [
        {
          "name": "List Reviews",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews?limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["reviews"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "hotel_id",
                  "value": "{{hotelId}}",
                  "disabled": true
                },
                {
                  "key": "rating_min",
                  "value": "4",
                  "disabled": true
                },
                {
                  "key": "language",
                  "value": "en",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of reviews with optional filtering"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains reviews array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.reviews).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response contains pagination info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.pagination).to.not.be.undefined;",
                  "    pm.expect(response.data.pagination.total).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Review",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"hotel_id\": \"{{hotelId}}\",\n  \"reviewer_info_id\": \"456e7890-e89b-12d3-a456-426614174001\",\n  \"rating\": 4.5,\n  \"title\": \"Excellent stay with great service\",\n  \"comment\": \"Had a wonderful time at this hotel. The staff was incredibly friendly and the room was spotless. The location is perfect for exploring the city. Highly recommend!\",\n  \"review_date\": \"2024-01-15T00:00:00Z\",\n  \"language\": \"en\",\n  \"service_rating\": 5.0,\n  \"cleanliness_rating\": 4.5,\n  \"location_rating\": 5.0,\n  \"value_rating\": 4.0,\n  \"trip_type\": \"leisure\",\n  \"room_type\": \"deluxe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/reviews",
              "host": ["{{baseUrl}}"],
              "path": ["reviews"]
            },
            "description": "Create a new hotel review"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Review created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save review ID for later use",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('reviewId', response.data.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Review by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/{{reviewId}}",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "{{reviewId}}"]
            },
            "description": "Retrieve a specific review by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Review data is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.id).to.eql(pm.collectionVariables.get('reviewId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Review",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 5.0,\n  \"title\": \"Updated: Absolutely fantastic!\",\n  \"comment\": \"After my initial review, I wanted to update it. This hotel exceeded all expectations. The service was impeccable and I will definitely return.\",\n  \"service_rating\": 5.0,\n  \"cleanliness_rating\": 5.0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/reviews/{{reviewId}}",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "{{reviewId}}"]
            },
            "description": "Update an existing review"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Review updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.rating).to.eql(5.0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Reviews",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/search?query=excellent service&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "excellent service"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "rating_min",
                  "value": "4",
                  "disabled": true
                },
                {
                  "key": "language",
                  "value": "en",
                  "disabled": true
                },
                {
                  "key": "verified_only",
                  "value": "true",
                  "disabled": true
                }
              ]
            },
            "description": "Perform full-text search across reviews"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain reviews', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.reviews).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Search metadata is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.search_metadata).to.not.be.undefined;",
                  "    pm.expect(response.data.search_metadata.query).to.not.be.undefined;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Review Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "statistics"],
              "query": [
                {
                  "key": "hotel_id",
                  "value": "{{hotelId}}",
                  "disabled": true
                },
                {
                  "key": "from_date",
                  "value": "2024-01-01",
                  "disabled": true
                },
                {
                  "key": "to_date",
                  "value": "2024-01-31",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve aggregated review statistics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics data is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.total_reviews).to.be.a('number');",
                  "    pm.expect(response.data.average_rating).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Bulk Create Reviews",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reviews\": [\n    {\n      \"hotel_id\": \"{{hotelId}}\",\n      \"reviewer_info_id\": \"456e7890-e89b-12d3-a456-426614174001\",\n      \"rating\": 4.0,\n      \"title\": \"Good value for money\",\n      \"comment\": \"Clean rooms and friendly staff.\",\n      \"review_date\": \"2024-01-15T00:00:00Z\",\n      \"language\": \"en\"\n    },\n    {\n      \"hotel_id\": \"{{hotelId}}\",\n      \"reviewer_info_id\": \"789e0123-e89b-12d3-a456-426614174002\",\n      \"rating\": 5.0,\n      \"title\": \"Outstanding experience\",\n      \"comment\": \"Everything was perfect from check-in to check-out.\",\n      \"review_date\": \"2024-01-16T00:00:00Z\",\n      \"language\": \"en\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/reviews/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "bulk"]
            },
            "description": "Create multiple reviews in a single request"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Bulk creation results are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.created_count).to.be.a('number');",
                  "    pm.expect(response.data.failed_count).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Upload Reviews File",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "provider_id",
                  "value": "{{providerId}}",
                  "type": "text"
                },
                {
                  "key": "validate_only",
                  "value": "false",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/reviews/upload",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "upload"]
            },
            "description": "Upload a CSV file for batch review processing"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Processing ID received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.processing_id).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save processing ID",
                  "if (pm.response.code === 202) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('processingId', response.data.processing_id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Processing Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/processing/{{processingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "processing", "{{processingId}}"]
            },
            "description": "Check the status of a file processing job"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Processing status is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.status).to.not.be.undefined;",
                  "    pm.expect(response.data.progress_percentage).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Review",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/{{reviewId}}",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "{{reviewId}}"]
            },
            "description": "Delete a review (only by owner or admin)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Deletion confirmed', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Hotels",
      "item": [
        {
          "name": "List Hotels",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hotels?limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["hotels"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "name",
                  "value": "Grand",
                  "disabled": true
                },
                {
                  "key": "city",
                  "value": "London",
                  "disabled": true
                },
                {
                  "key": "star_rating",
                  "value": "5",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of hotels with optional filtering"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Hotels array is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.hotels).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Hotel",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Grand Hotel Example\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"London\",\n  \"country\": \"United Kingdom\",\n  \"postal_code\": \"SW1A 1AA\",\n  \"phone\": \"+44 20 7123 4567\",\n  \"email\": \"info@grandhotelexample.com\",\n  \"star_rating\": 5,\n  \"description\": \"A luxurious hotel in the heart of London with exceptional service and amenities.\",\n  \"amenities\": [\"wifi\", \"restaurant\", \"gym\", \"spa\", \"pool\", \"parking\"],\n  \"latitude\": 51.5074,\n  \"longitude\": -0.1278\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/hotels",
              "host": ["{{baseUrl}}"],
              "path": ["hotels"]
            },
            "description": "Create a new hotel (admin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Hotel created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save hotel ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('hotelId', response.data.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Hotel by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/hotels/{{hotelId}}",
              "host": ["{{baseUrl}}"],
              "path": ["hotels", "{{hotelId}}"]
            },
            "description": "Retrieve a specific hotel by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Hotel data is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.id).to.eql(pm.collectionVariables.get('hotelId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Hotel",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"An updated luxurious hotel in the heart of London with exceptional service, world-class amenities, and newly renovated facilities.\",\n  \"amenities\": [\"wifi\", \"restaurant\", \"gym\", \"spa\", \"pool\", \"parking\", \"concierge\", \"room_service\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/hotels/{{hotelId}}",
              "host": ["{{baseUrl}}"],
              "path": ["hotels", "{{hotelId}}"]
            },
            "description": "Update an existing hotel (admin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Hotel updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Providers",
      "item": [
        {
          "name": "List Providers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/providers?active_only=true",
              "host": ["{{baseUrl}}"],
              "path": ["providers"],
              "query": [
                {
                  "key": "active_only",
                  "value": "true"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a list of review providers"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Providers array is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.providers).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Provider",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"TripAdvisor\",\n  \"base_url\": \"https://tripadvisor.com\",\n  \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/providers",
              "host": ["{{baseUrl}}"],
              "path": ["providers"]
            },
            "description": "Create a new review provider (admin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Provider created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.not.be.undefined;",
                  "});",
                  "",
                  "// Save provider ID",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('providerId', response.data.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Provider by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/providers/{{providerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["providers", "{{providerId}}"]
            },
            "description": "Retrieve a specific provider by its ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Provider data is present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.id).to.eql(pm.collectionVariables.get('providerId'));",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling Examples",
      "item": [
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews",
              "host": ["{{baseUrl}}"],
              "path": ["reviews"]
            },
            "description": "Example of unauthorized request (no token)"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Remove auth for this request",
                  "pm.request.removeHeader('Authorization');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response format is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error_code).to.eql('UNAUTHORIZED');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 6,\n  \"title\": \"\",\n  \"comment\": \"Test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/reviews",
              "host": ["{{baseUrl}}"],
              "path": ["reviews"]
            },
            "description": "Example of validation error (invalid rating)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 422', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Validation error format is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error_code).to.eql('VALIDATION_ERROR');",
                  "    pm.expect(response.details.validation_errors).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Not Found Error",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reviews/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["reviews", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Example of not found error"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Not found error format is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error_code).to.eql('NOT_FOUND');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level test scripts run after each request"
        ]
      }
    }
  ]
}