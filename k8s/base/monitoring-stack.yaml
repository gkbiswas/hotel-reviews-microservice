apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotel-reviews-prometheus
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hotel-reviews
      component: prometheus
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: prometheus
    spec:
      serviceAccountName: hotel-reviews-service-account
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --storage.tsdb.retention.time=30d
            - --web.enable-lifecycle
            - --web.enable-admin-api
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: hotel-reviews-prometheus-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotel-reviews-grafana
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hotel-reviews
      component: grafana
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: grafana
    spec:
      serviceAccountName: hotel-reviews-service-account
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: grafana-admin-password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-kubernetes-app,grafana-clock-panel,grafana-simple-json-datasource"
            - name: GF_SERVER_ROOT_URL
              value: "https://grafana.hotel-reviews.com"
            - name: GF_SECURITY_COOKIE_SECURE
              value: "true"
            - name: GF_SECURITY_COOKIE_SAMESITE
              value: "strict"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_USERS_AUTO_ASSIGN_ORG
              value: "true"
            - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
              value: "Viewer"
            - name: GF_ALERTING_ENABLED
              value: "true"
            - name: GF_ALERTING_EXECUTE_ALERTS
              value: "true"
            - name: GF_METRICS_ENABLED
              value: "true"
            - name: GF_LOG_LEVEL
              value: "info"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: hotel-reviews-grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'hotel-reviews-cluster'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      # Hotel Reviews API
      - job_name: 'hotel-reviews-api'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - hotel-reviews
                - hotel-reviews-staging
                - hotel-reviews-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: hotel-reviews-api
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: environment
            regex: hotel-reviews-(.+)
            replacement: ${1}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: 'go_.*'
            action: drop
          - source_labels: [__name__]
            regex: 'promhttp_.*'
            action: drop
      
      # Hotel Reviews Worker
      - job_name: 'hotel-reviews-worker'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - hotel-reviews
                - hotel-reviews-staging
                - hotel-reviews-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: hotel-reviews-worker
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: environment
            regex: hotel-reviews-(.+)
            replacement: ${1}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
      
      # PostgreSQL
      - job_name: 'hotel-reviews-postgres'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - hotel-reviews
                - hotel-reviews-staging
                - hotel-reviews-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: hotel-reviews-postgres
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: environment
            regex: hotel-reviews-(.+)
            replacement: ${1}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
      
      # Redis
      - job_name: 'hotel-reviews-redis'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - hotel-reviews
                - hotel-reviews-staging
                - hotel-reviews-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: hotel-reviews-redis
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: environment
            regex: hotel-reviews-(.+)
            replacement: ${1}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
      
      # Kafka
      - job_name: 'hotel-reviews-kafka'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - hotel-reviews
                - hotel-reviews-staging
                - hotel-reviews-production
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: hotel-reviews-kafka
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_namespace]
            target_label: environment
            regex: hotel-reviews-(.+)
            replacement: ${1}
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
      
      # NGINX Ingress Controller
      - job_name: 'nginx-ingress'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ingress-nginx
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
  
  rules.yml: |
    groups:
      - name: hotel-reviews.rules
        rules:
          # HTTP request rate
          - record: hotel_reviews:http_request_rate
            expr: rate(http_requests_total[5m])
          
          # HTTP error rate
          - record: hotel_reviews:http_error_rate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])
          
          # Database connection utilization
          - record: hotel_reviews:database_connection_utilization
            expr: pg_stat_database_numbackends / pg_settings_max_connections
          
          # Redis memory utilization
          - record: hotel_reviews:redis_memory_utilization
            expr: redis_memory_used_bytes / redis_memory_max_bytes
          
          # Kafka consumer lag
          - record: hotel_reviews:kafka_consumer_lag_total
            expr: sum(kafka_consumer_lag) by (topic, consumer_group)
          
          # Pod CPU utilization
          - record: hotel_reviews:pod_cpu_utilization
            expr: rate(container_cpu_usage_seconds_total[5m]) / container_spec_cpu_quota * container_spec_cpu_period
          
          # Pod memory utilization
          - record: hotel_reviews:pod_memory_utilization
            expr: container_memory_usage_bytes / container_spec_memory_limit_bytes
          
          # SLA calculations
          - record: hotel_reviews:sla_availability_5m
            expr: 1 - (rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]))
          
          - record: hotel_reviews:sla_latency_p95_5m
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))
          
          - record: hotel_reviews:sla_latency_p99_5m
            expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: grafana
data:
  grafana.ini: |
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    protocol = http
    http_addr = 0.0.0.0
    http_port = 3000
    domain = grafana.hotel-reviews.com
    root_url = https://grafana.hotel-reviews.com
    
    [security]
    admin_user = admin
    cookie_secure = true
    cookie_samesite = strict
    
    [users]
    allow_sign_up = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.anonymous]
    enabled = false
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [metrics]
    enabled = true
    
    [log]
    mode = console
    level = info
    
    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db
    
    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/overview.json
  
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://hotel-reviews-prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          httpMethod: POST
          timeInterval: 5s
          queryTimeout: 60s
          scrapeInterval: 15s
        secureJsonData: {}
      
      - name: Prometheus-Staging
        type: prometheus
        access: proxy
        url: http://hotel-reviews-prometheus.hotel-reviews-staging:9090
        isDefault: false
        editable: true
        jsonData:
          httpMethod: POST
          timeInterval: 5s
          queryTimeout: 60s
          scrapeInterval: 15s
        secureJsonData: {}
  
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: grafana
data:
  overview.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 1,
      "iteration": 1640995200000,
      "links": [],
      "panels": [
        {
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "vis": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "expr": "sum(rate(http_requests_total{job=\"hotel-reviews-api\"}[5m]))",
              "interval": "",
              "legendFormat": "Request Rate",
              "refId": "A"
            }
          ],
          "title": "HTTP Request Rate",
          "type": "timeseries"
        },
        {
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 0.01
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 2,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "center",
            "orientation": "horizontal",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "8.0.0",
          "targets": [
            {
              "expr": "rate(http_requests_total{job=\"hotel-reviews-api\",status=~\"5..\"}[5m]) / rate(http_requests_total{job=\"hotel-reviews-api\"}[5m])",
              "interval": "",
              "legendFormat": "Error Rate",
              "refId": "A"
            }
          ],
          "title": "HTTP Error Rate",
          "type": "stat"
        }
      ],
      "schemaVersion": 27,
      "style": "dark",
      "tags": ["hotel-reviews"],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "UTC",
      "title": "Hotel Reviews Overview",
      "uid": "hotel-reviews-overview",
      "version": 1
    }