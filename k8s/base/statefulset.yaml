apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hotel-reviews-postgres
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: postgres
spec:
  serviceName: hotel-reviews-postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: hotel-reviews
      component: postgres
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hotel-reviews-service-account
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
        - name: postgres-init
          image: postgres:15-alpine
          command:
            - /bin/sh
            - -c
            - |
              if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
                initdb -D /var/lib/postgresql/data --auth-host=md5
              fi
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: hotel-reviews-config
                  key: database.name
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-password
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: hotel-reviews-config
                  key: database.name
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-password
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=md5"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
              add:
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
        
        - name: postgres-exporter
          image: quay.io/prometheuscommunity/postgres-exporter:latest
          ports:
            - name: metrics
              containerPort: 9187
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: database-password
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: hotel-reviews-config
                  key: database.name
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-init-scripts
          configMap:
            name: postgres-init-scripts
        - name: postgres-config
          configMap:
            name: postgres-config
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        labels:
          app: hotel-reviews
          component: postgres
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hotel-reviews-redis
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: redis
spec:
  serviceName: hotel-reviews-redis-headless
  replicas: 1
  selector:
    matchLabels:
      app: hotel-reviews
      component: redis
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hotel-reviews-service-account
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: redis-password
          command:
            - redis-server
            - /etc/redis/redis.conf
          args:
            - --maxmemory
            - 256mb
            - --maxmemory-policy
            - allkeys-lru
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
        
        - name: redis-exporter
          image: oliver006/redis_exporter:latest
          ports:
            - name: metrics
              containerPort: 9121
              protocol: TCP
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hotel-reviews-secrets
                  key: redis-password
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: hotel-reviews
          component: redis
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hotel-reviews-kafka
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: kafka
spec:
  serviceName: hotel-reviews-kafka-headless
  replicas: 3
  selector:
    matchLabels:
      app: hotel-reviews
      component: kafka
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: kafka
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9308"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hotel-reviews-service-account
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - name: kafka
              containerPort: 9092
              protocol: TCP
            - name: kafka-internal
              containerPort: 9093
              protocol: TCP
          env:
            - name: KAFKA_BROKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "hotel-reviews-zookeeper:2181"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://$(POD_NAME).hotel-reviews-kafka-headless:9092,PLAINTEXT_HOST://localhost:9093"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "2"
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_NUM_PARTITIONS
              value: "3"
            - name: KAFKA_COMPRESSION_TYPE
              value: "snappy"
            - name: KAFKA_JMX_PORT
              value: "9999"
            - name: KAFKA_JMX_OPTS
              value: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "kafka-broker-api-versions --bootstrap-server localhost:9092"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "kafka-broker-api-versions --bootstrap-server localhost:9092"
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
        
        - name: kafka-exporter
          image: danielqsj/kafka-exporter:latest
          ports:
            - name: metrics
              containerPort: 9308
              protocol: TCP
          command:
            - kafka_exporter
            - --kafka.server=localhost:9092
            - --web.listen-address=:9308
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9308
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9308
            initialDelaySeconds: 5
            periodSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
        labels:
          app: hotel-reviews
          component: kafka
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hotel-reviews-zookeeper
  namespace: hotel-reviews
  labels:
    app: hotel-reviews
    component: zookeeper
spec:
  serviceName: hotel-reviews-zookeeper-headless
  replicas: 3
  selector:
    matchLabels:
      app: hotel-reviews
      component: zookeeper
  template:
    metadata:
      labels:
        app: hotel-reviews
        component: zookeeper
    spec:
      serviceAccountName: hotel-reviews-service-account
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.4.0
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
            - name: server
              containerPort: 2888
              protocol: TCP
            - name: leader-election
              containerPort: 3888
              protocol: TCP
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
            - name: ZOOKEEPER_INIT_LIMIT
              value: "5"
            - name: ZOOKEEPER_SYNC_LIMIT
              value: "2"
            - name: ZOOKEEPER_SERVERS
              value: "hotel-reviews-zookeeper-0.hotel-reviews-zookeeper-headless:2888:3888;hotel-reviews-zookeeper-1.hotel-reviews-zookeeper-headless:2888:3888;hotel-reviews-zookeeper-2.hotel-reviews-zookeeper-headless:2888:3888"
            - name: ZOOKEEPER_SERVER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "echo ruok | nc localhost 2181 | grep imok"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "echo ruok | nc localhost 2181 | grep imok"
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper/data
            - name: zookeeper-logs
              mountPath: /var/lib/zookeeper/logs
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
        labels:
          app: hotel-reviews
          component: zookeeper
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard
    - metadata:
        name: zookeeper-logs
        labels:
          app: hotel-reviews
          component: zookeeper
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard