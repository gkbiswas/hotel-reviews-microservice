version: '3.8'

services:
  # Hotel Reviews API Service
  hotel-reviews-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: hotel-reviews-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      HOTEL_REVIEWS_DATABASE_HOST: postgres
      HOTEL_REVIEWS_DATABASE_PORT: 5432
      HOTEL_REVIEWS_DATABASE_USER: postgres
      HOTEL_REVIEWS_DATABASE_PASSWORD: postgres
      HOTEL_REVIEWS_DATABASE_NAME: hotel_reviews
      HOTEL_REVIEWS_DATABASE_SSL_MODE: disable
      
      # S3 Configuration (using MinIO for local development)
      HOTEL_REVIEWS_S3_REGION: us-east-1
      HOTEL_REVIEWS_S3_ACCESS_KEY_ID: minioadmin
      HOTEL_REVIEWS_S3_SECRET_ACCESS_KEY: minioadmin
      HOTEL_REVIEWS_S3_BUCKET: hotel-reviews-files
      HOTEL_REVIEWS_S3_ENDPOINT: http://minio:9000
      HOTEL_REVIEWS_S3_FORCE_PATH_STYLE: true
      HOTEL_REVIEWS_S3_USE_SSL: false
      
      # Cache Configuration
      HOTEL_REVIEWS_CACHE_TYPE: redis
      HOTEL_REVIEWS_CACHE_HOST: redis
      HOTEL_REVIEWS_CACHE_PORT: 6379
      
      # Logging Configuration
      HOTEL_REVIEWS_LOG_LEVEL: info
      HOTEL_REVIEWS_LOG_FORMAT: json
      HOTEL_REVIEWS_LOG_OUTPUT: stdout
      
      # Server Configuration
      HOTEL_REVIEWS_SERVER_HOST: 0.0.0.0
      HOTEL_REVIEWS_SERVER_PORT: 8080
      HOTEL_REVIEWS_SERVER_READ_TIMEOUT: 30s
      HOTEL_REVIEWS_SERVER_WRITE_TIMEOUT: 30s
      
      # Processing Configuration
      HOTEL_REVIEWS_PROCESSING_WORKER_COUNT: 4
      HOTEL_REVIEWS_PROCESSING_BATCH_SIZE: 1000
      HOTEL_REVIEWS_PROCESSING_MAX_RETRIES: 3
      
      # Security Configuration
      HOTEL_REVIEWS_SECURITY_JWT_SECRET: your-secret-key-change-in-production
      HOTEL_REVIEWS_SECURITY_JWT_EXPIRATION: 24h
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./logs:/app/logs
      - ./tmp:/app/tmp
    networks:
      - hotel-reviews-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-reviews-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hotel_reviews
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - hotel-reviews-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hotel_reviews"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotel-reviews-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel-reviews-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: hotel-reviews-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - hotel-reviews-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: server /data --console-address ":9001"

  # MinIO Client (for bucket creation)
  minio-client:
    image: minio/mc:latest
    container_name: hotel-reviews-minio-client
    depends_on:
      - minio
    networks:
      - hotel-reviews-network
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/hotel-reviews-files;
      /usr/bin/mc policy set public minio/hotel-reviews-files;
      exit 0;
      "

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel-reviews-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hotel-reviews-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: hotel-reviews-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hotel-reviews-network
    profiles:
      - monitoring

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: hotel-reviews-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - hotel-reviews-network
    profiles:
      - monitoring

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: hotel-reviews-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - hotel-reviews-api
    networks:
      - hotel-reviews-network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  hotel-reviews-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16