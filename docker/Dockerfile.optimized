# Optimized Multi-stage Dockerfile for Hotel Reviews Microservice
# This Dockerfile is optimized for security, performance, and minimal size

# Stage 1: Build dependencies stage
FROM golang:1.21-alpine3.18 AS dependencies

# Security: Run as non-root during build
RUN addgroup -g 1000 -S buildgroup && \
    adduser -u 1000 -S builduser -G buildgroup

# Install only essential build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    gcc \
    musl-dev

# Set build environment for optimized binary
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64

WORKDIR /build

# Copy go mod files first for optimal Docker layer caching
COPY go.mod go.sum ./

# Download dependencies as non-root user
USER builduser
RUN go mod download && go mod verify

# Stage 2: Build stage
FROM dependencies AS builder

# Copy source code (leveraging previous layer cache)
COPY --chown=builduser:buildgroup . .

# Build optimized binary with security flags
RUN go build \
    -ldflags='-w -s -extldflags "-static" -X main.version=${VERSION:-dev} -X main.buildDate=${BUILD_DATE:-unknown}' \
    -a \
    -installsuffix cgo \
    -trimpath \
    -o hotel-reviews-api \
    ./cmd/api

# Verify binary is statically linked and stripped
RUN file hotel-reviews-api && \
    (ldd hotel-reviews-api 2>&1 | grep -q "not a dynamic executable" || exit 1)

# Stage 3: Security scanning stage (optional for CI/CD)
FROM alpine:3.18 AS security-scanner

# Install security scanning tools
RUN apk add --no-cache \
    ca-certificates \
    curl \
    file

# Copy binary for scanning
COPY --from=builder /build/hotel-reviews-api /tmp/hotel-reviews-api

# Basic security checks
RUN file /tmp/hotel-reviews-api && \
    (ldd /tmp/hotel-reviews-api 2>&1 | grep -q "not a dynamic executable" || exit 1)

# Placeholder for additional security scanning tools
# Example: Run Trivy, Grype, or other scanners here
# RUN trivy fs /tmp/hotel-reviews-api

# Stage 4: Final minimal runtime stage
FROM scratch AS runtime

# Copy essential runtime files from Alpine
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy the binary
COPY --from=builder /build/hotel-reviews-api /hotel-reviews-api

# Create non-root user (matching the one from dependencies stage)
USER 1000:1000

# Health check (note: scratch doesn't have curl, so we'll use our app's health endpoint)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/hotel-reviews-api", "-health-check"]

# Expose port
EXPOSE 8080

# Set environment variables
ENV HOTEL_REVIEWS_SERVER_HOST=0.0.0.0 \
    HOTEL_REVIEWS_SERVER_PORT=8080 \
    HOTEL_REVIEWS_LOG_LEVEL=info \
    HOTEL_REVIEWS_LOG_FORMAT=json \
    HOTEL_REVIEWS_LOG_OUTPUT=stdout

# OCI metadata labels
LABEL org.opencontainers.image.title="hotel-reviews-microservice" \
      org.opencontainers.image.description="Optimized Hotel Reviews Microservice" \
      org.opencontainers.image.vendor="Hotel Reviews Inc." \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.url="https://github.com/gkbiswas/hotel-reviews-microservice" \
      org.opencontainers.image.source="https://github.com/gkbiswas/hotel-reviews-microservice" \
      org.opencontainers.image.documentation="https://github.com/gkbiswas/hotel-reviews-microservice/README.md" \
      org.opencontainers.image.created="${BUILD_DATE:-unknown}" \
      org.opencontainers.image.version="${VERSION:-dev}" \
      org.opencontainers.image.revision="${GIT_COMMIT:-unknown}"

# Default command
ENTRYPOINT ["/hotel-reviews-api"]
CMD ["-mode", "server"]

# Alternative runtime stage with minimal Alpine (if scratch is too minimal)
FROM alpine:3.18 AS runtime-alpine

# Security: Install dumb-init and minimal runtime deps
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    dumb-init && \
    addgroup -g 1000 -S appgroup && \
    adduser -u 1000 -S appuser -G appgroup

# Copy binary
COPY --from=builder /build/hotel-reviews-api /app/hotel-reviews-api

# Create directories with proper permissions
RUN mkdir -p /app/tmp /app/logs && \
    chown -R appuser:appgroup /app && \
    chmod +x /app/hotel-reviews-api

WORKDIR /app
USER appuser

# Health check with curl fallback
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/app/hotel-reviews-api", "-health-check"]

EXPOSE 8080

ENV HOTEL_REVIEWS_SERVER_HOST=0.0.0.0 \
    HOTEL_REVIEWS_SERVER_PORT=8080 \
    HOTEL_REVIEWS_LOG_LEVEL=info \
    HOTEL_REVIEWS_LOG_FORMAT=json \
    HOTEL_REVIEWS_LOG_OUTPUT=stdout

# Labels
LABEL org.opencontainers.image.title="hotel-reviews-microservice-alpine" \
      org.opencontainers.image.description="Hotel Reviews Microservice (Alpine variant)" \
      org.opencontainers.image.vendor="Hotel Reviews Inc." \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.url="https://github.com/gkbiswas/hotel-reviews-microservice" \
      org.opencontainers.image.source="https://github.com/gkbiswas/hotel-reviews-microservice" \
      org.opencontainers.image.documentation="https://github.com/gkbiswas/hotel-reviews-microservice/README.md" \
      org.opencontainers.image.created="${BUILD_DATE:-unknown}" \
      org.opencontainers.image.version="${VERSION:-dev}" \
      org.opencontainers.image.revision="${GIT_COMMIT:-unknown}"

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/app/hotel-reviews-api", "-mode", "server"]